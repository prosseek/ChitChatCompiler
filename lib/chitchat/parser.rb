#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.13
# from Racc grammer file "".
#

require 'racc/parser.rb'

  require "lexer"
  require "nodes"

class Parser < Racc::Parser

module_eval(<<'...end grammar.y/module_eval...', 'grammar.y', 196)
  def parse(code, show_tokens=false)
    @tokens = Lexer.new.run(code)
    p @tokens if show_tokens
    do_parse
  end
  
  def next_token
    @tokens.shift
  end
...end grammar.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    30,    99,    31,    27,    28,    77,    20,    21,    22,    23,
    24,    17,    29,    18,    19,    98,    84,    26,    30,    83,
    31,    27,    28,    34,    20,    21,    22,    23,    24,    17,
    29,    18,    19,    16,    73,    26,    30,    58,    31,    27,
    28,    56,    20,    21,    22,    23,    24,    17,    29,    18,
    19,    16,     5,    26,    30,     5,    31,    27,    28,     5,
    20,    21,    22,    23,    24,    17,    29,    18,    19,    16,
    88,    26,    50,    53,    52,    49,     5,     5,    34,     6,
    45,    46,     6,    89,    34,    34,     6,    16,    30,   100,
    31,    27,    28,    86,    20,    21,    22,    23,    24,    17,
    29,    18,    19,     6,     6,    26,    30,    49,    31,    27,
    28,     5,    20,    21,    22,    23,    24,    17,    29,    18,
    19,    16,    34,    26,    45,    46,    43,    44,    39,    40,
    41,    42,    37,    38,    36,    35,   101,   102,     6,    16,
    30,   103,    31,    27,    28,    78,    20,    21,    22,    23,
    24,    17,    29,    18,    19,    32,    96,    26,    30,    95,
    31,    27,    28,     5,    20,    21,    22,    23,    24,    17,
    29,    18,    19,    16,    34,    26,    45,    46,    43,    44,
    39,    40,    41,    42,    37,    38,    36,    35,   106,   nil,
     6,    16,    30,   nil,    31,    27,    28,   nil,    20,    21,
    22,    23,    24,    17,    29,    18,    19,   nil,   nil,    26,
    30,   nil,    31,    27,    28,   nil,    20,    21,    22,    23,
    24,    17,    29,    18,    19,    16,   nil,    26,    30,   nil,
    31,    27,    28,   nil,    20,    21,    22,    23,    24,    17,
    29,    18,    19,    16,   nil,    26,    30,   nil,    31,    27,
    28,     5,    20,    21,    22,    23,    24,    17,    29,    18,
    19,    16,    34,    26,    45,    46,    43,    44,    39,    40,
    41,    42,    37,    38,    36,    35,   nil,   nil,     6,    16,
    30,   nil,    31,    27,    28,     5,    20,    21,    22,    23,
    24,    17,    29,    18,    19,   nil,    34,    26,    45,    46,
    43,    44,    39,    40,    41,    42,    37,    38,    36,    35,
   nil,   nil,     6,    16,    30,   nil,    31,    27,    28,     5,
    20,    21,    22,    23,    24,    17,    29,    18,    19,   nil,
    34,    26,    45,    46,    43,    44,    39,    40,    41,    42,
    37,    38,    36,    35,   nil,   nil,     6,    16,    30,   nil,
    31,    27,    28,   nil,    20,    21,    22,    23,    24,    17,
    29,    18,    19,   nil,   nil,    26,    30,   nil,    31,    27,
    28,   nil,    20,    21,    22,    23,    24,    17,    29,    18,
    19,    16,   nil,    26,    30,   nil,    31,    27,    28,   nil,
    20,    21,    22,    23,    24,    17,    29,    18,    19,    16,
   nil,    26,    30,   nil,    31,    27,    28,   nil,    20,    21,
    22,    23,    24,    17,    29,    18,    19,    16,   nil,    26,
    30,   nil,    31,    27,    28,   nil,    20,    21,    22,    23,
    24,    17,    29,    18,    19,    16,   nil,    26,    30,   nil,
    31,    27,    28,   nil,    20,    21,    22,    23,    24,    17,
    29,    18,    19,    16,   nil,    26,    30,   nil,    31,    27,
    28,   nil,    20,    21,    22,    23,    24,    17,    29,    18,
    19,    16,   nil,    26,    30,   nil,    31,    27,    28,   nil,
    20,    21,    22,    23,    24,    17,    29,    18,    19,    16,
   nil,    26,    30,   nil,    31,    27,    28,   nil,    20,    21,
    22,    23,    24,    17,    29,    18,    19,    16,   nil,    26,
    30,   nil,    31,    27,    28,   nil,    20,    21,    22,    23,
    24,    17,    29,    18,    19,    16,   nil,    26,    30,   nil,
    31,    27,    28,   nil,    20,    21,    22,    23,    24,    17,
    29,    18,    19,    16,   nil,    26,    30,   nil,    31,    27,
    28,     5,    20,    21,    22,    23,    24,    17,    29,    18,
    19,    16,    34,    26,    45,    46,    43,    44,    39,    40,
    41,    42,    37,    38,    36,    35,     5,   nil,     6,    16,
    34,   nil,    45,    46,    43,    44,   nil,    34,   nil,    45,
    46,    43,    44,    39,    40,    41,    42,    37,    38,    36,
    35,   nil,    34,     6,    45,    46,    43,    44,    39,    40,
    41,    42,    37,    38,    36,    35,   nil,   nil,   nil,    34,
    71,    45,    46,    43,    44,    39,    40,    41,    42,    37,
    38,    36,    34,   nil,    45,    46,    43,    44,    39,    40,
    41,    42,    37,    38,    34,   nil,    45,    46,    43,    44,
    39,    40,    41,    42,    34,   nil,    45,    46,    43,    44,
    39,    40,    41,    42,    34,   nil,    45,    46,    43,    44,
    34,   nil,    45,    46,    43,    44,    34,   nil,    45,    46,
    43,    44,    34,   nil,    45,    46 ]

racc_action_check = [
    49,    91,    49,    49,    49,    52,    49,    49,    49,    49,
    49,    49,    49,    49,    49,    91,    74,    49,    33,    74,
    33,    33,    33,    51,    33,    33,    33,    33,    33,    33,
    33,    33,    33,    49,    49,    33,    50,    34,    50,    50,
    50,    32,    50,    50,    50,    50,    50,    50,    50,    50,
    50,    33,    79,    50,     0,    99,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    50,
    77,     0,    25,    28,    27,    25,     3,    76,    67,    79,
    67,    67,    99,    78,    70,    69,     0,     0,    16,    92,
    16,    16,    16,    77,    16,    16,    16,    16,    16,    16,
    16,    16,    16,     3,    76,    16,    90,    58,    90,    90,
    90,    90,    90,    90,    90,    90,    90,    90,    90,    90,
    90,    16,    93,    90,    93,    93,    93,    93,    93,    93,
    93,    93,    93,    93,    93,    93,    94,    96,    90,    90,
    26,    97,    26,    26,    26,    53,    26,    26,    26,    26,
    26,    26,    26,    26,    26,     1,    87,    26,    85,    87,
    85,    85,    85,    85,    85,    85,    85,    85,    85,    85,
    85,    85,    85,    26,     4,    85,     4,     4,     4,     4,
     4,     4,     4,     4,     4,     4,     4,     4,   105,   nil,
    85,    85,    84,   nil,    84,    84,    84,   nil,    84,    84,
    84,    84,    84,    84,    84,    84,    84,   nil,   nil,    84,
    30,   nil,    30,    30,    30,   nil,    30,    30,    30,    30,
    30,    30,    30,    30,    30,    84,   nil,    30,    31,   nil,
    31,    31,    31,   nil,    31,    31,    31,    31,    31,    31,
    31,    31,    31,    30,   nil,    31,    81,   nil,    81,    81,
    81,    81,    81,    81,    81,    81,    81,    81,    81,    81,
    81,    31,    72,    81,    72,    72,    72,    72,    72,    72,
    72,    72,    72,    72,    72,    72,   nil,   nil,    81,    81,
   104,   nil,   104,   104,   104,   104,   104,   104,   104,   104,
   104,   104,   104,   104,   104,   nil,    75,   104,    75,    75,
    75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
   nil,   nil,   104,   104,    80,   nil,    80,    80,    80,    80,
    80,    80,    80,    80,    80,    80,    80,    80,    80,   nil,
    57,    80,    57,    57,    57,    57,    57,    57,    57,    57,
    57,    57,    57,    57,   nil,   nil,    80,    80,    35,   nil,
    35,    35,    35,   nil,    35,    35,    35,    35,    35,    35,
    35,    35,    35,   nil,   nil,    35,    36,   nil,    36,    36,
    36,   nil,    36,    36,    36,    36,    36,    36,    36,    36,
    36,    35,   nil,    36,    46,   nil,    46,    46,    46,   nil,
    46,    46,    46,    46,    46,    46,    46,    46,    46,    36,
   nil,    46,    38,   nil,    38,    38,    38,   nil,    38,    38,
    38,    38,    38,    38,    38,    38,    38,    46,   nil,    38,
    39,   nil,    39,    39,    39,   nil,    39,    39,    39,    39,
    39,    39,    39,    39,    39,    38,   nil,    39,    40,   nil,
    40,    40,    40,   nil,    40,    40,    40,    40,    40,    40,
    40,    40,    40,    39,   nil,    40,    41,   nil,    41,    41,
    41,   nil,    41,    41,    41,    41,    41,    41,    41,    41,
    41,    40,   nil,    41,    42,   nil,    42,    42,    42,   nil,
    42,    42,    42,    42,    42,    42,    42,    42,    42,    41,
   nil,    42,    43,   nil,    43,    43,    43,   nil,    43,    43,
    43,    43,    43,    43,    43,    43,    43,    42,   nil,    43,
    44,   nil,    44,    44,    44,   nil,    44,    44,    44,    44,
    44,    44,    44,    44,    44,    43,   nil,    44,    45,   nil,
    45,    45,    45,   nil,    45,    45,    45,    45,    45,    45,
    45,    45,    45,    44,   nil,    45,    37,   nil,    37,    37,
    37,    54,    37,    37,    37,    37,    37,    37,    37,    37,
    37,    45,    54,    37,    54,    54,    54,    54,    54,    54,
    54,    54,    54,    54,    54,    54,    55,   nil,    54,    37,
    63,   nil,    63,    63,    63,    63,   nil,    55,   nil,    55,
    55,    55,    55,    55,    55,    55,    55,    55,    55,    55,
    55,   nil,    47,    55,    47,    47,    47,    47,    47,    47,
    47,    47,    47,    47,    47,    47,   nil,   nil,   nil,    59,
    47,    59,    59,    59,    59,    59,    59,    59,    59,    59,
    59,    59,    60,   nil,    60,    60,    60,    60,    60,    60,
    60,    60,    60,    60,    61,   nil,    61,    61,    61,    61,
    61,    61,    61,    61,    62,   nil,    62,    62,    62,    62,
    62,    62,    62,    62,    66,   nil,    66,    66,    66,    66,
    64,   nil,    64,    64,    64,    64,    65,   nil,    65,    65,
    65,    65,    68,   nil,    68,    68 ]

racc_action_pointer = [
    52,   155,   nil,    69,   156,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    86,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    40,   138,    61,    59,   nil,
   208,   226,    41,    16,    24,   346,   364,   544,   400,   418,
   436,   454,   472,   490,   508,   526,   382,   584,   nil,    -2,
    34,     5,   -30,   119,   544,   569,   nil,   312,    72,   601,
   614,   626,   636,   562,   652,   658,   646,    60,   664,    67,
    66,   nil,   244,   nil,   -17,   278,    70,    57,    69,    45,
   312,   244,   nil,   nil,   190,   156,   nil,   123,   nil,   nil,
   104,    -2,    72,   104,   119,   nil,   124,   124,   nil,    48,
   nil,   nil,   nil,   nil,   278,   171,   nil ]

racc_action_default = [
    -1,   -61,    -2,    -3,    -4,    -7,    -8,    -9,   -10,   -11,
   -12,   -13,   -14,   -15,   -16,   -17,   -61,   -19,   -20,   -21,
   -22,   -23,   -24,   -25,   -26,   -29,   -61,   -61,   -61,   -57,
   -61,   -61,   -61,    -6,   -61,   -61,   -61,   -61,   -61,   -61,
   -61,   -61,   -61,   -61,   -61,   -61,   -61,   -61,   -27,   -61,
   -61,   -46,   -49,   -54,   -61,   -61,   107,    -5,   -29,   -34,
   -35,   -36,   -37,   -38,   -39,   -40,   -41,   -42,   -43,   -44,
   -45,   -18,   -32,   -30,   -61,   -47,   -61,   -61,   -61,   -61,
    -1,    -1,   -28,   -31,   -61,    -1,   -50,   -61,   -52,   -55,
    -1,   -61,   -61,   -33,   -61,   -51,   -61,   -61,   -58,   -61,
   -60,   -48,   -53,   -56,    -1,   -61,   -59 ]

racc_goto_table = [
     1,    33,    47,    74,    48,    76,    87,    79,   nil,   nil,
   nil,   nil,    51,   nil,   nil,   nil,    54,    55,   nil,    57,
   nil,    59,    60,    61,    62,    63,    64,    65,    66,    67,
    68,    69,    70,   nil,   nil,    72,    75,    82,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    80,    81,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    93,   nil,   nil,   nil,    85,   nil,   nil,    90,   nil,   nil,
    91,    92,   nil,   nil,   nil,    94,   nil,   nil,   nil,   nil,
    97,   nil,   nil,   nil,   nil,   nil,   nil,   104,   nil,   nil,
   nil,   nil,   nil,   nil,   105 ]

racc_goto_check = [
     1,     2,     4,    16,    15,    17,    18,    19,   nil,   nil,
   nil,   nil,     4,   nil,   nil,   nil,     4,     4,   nil,     4,
   nil,     4,     4,     4,     4,     4,     4,     4,     4,     4,
     4,     4,     4,   nil,   nil,     4,     4,    15,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     2,     2,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     4,   nil,   nil,   nil,     2,   nil,   nil,     2,   nil,   nil,
     1,     1,   nil,   nil,   nil,     1,   nil,   nil,   nil,   nil,
     1,   nil,   nil,   nil,   nil,   nil,   nil,     2,   nil,   nil,
   nil,   nil,   nil,   nil,     1 ]

racc_goto_pointer = [
   nil,     0,    -2,   nil,   -14,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   -21,   -46,   -47,   -71,   -46 ]

racc_goto_default = [
   nil,   nil,     2,     3,     4,     7,     8,     9,    10,    11,
    12,    13,    14,    15,    25,   nil,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 38, :_reduce_1,
  1, 38, :_reduce_2,
  1, 38, :_reduce_3,
  1, 40, :_reduce_4,
  3, 40, :_reduce_5,
  2, 40, :_reduce_6,
  1, 39, :_reduce_none,
  1, 39, :_reduce_none,
  1, 41, :_reduce_none,
  1, 41, :_reduce_none,
  1, 41, :_reduce_none,
  1, 41, :_reduce_none,
  1, 41, :_reduce_none,
  1, 41, :_reduce_none,
  1, 41, :_reduce_none,
  1, 41, :_reduce_none,
  1, 41, :_reduce_none,
  3, 41, :_reduce_18,
  1, 51, :_reduce_none,
  1, 51, :_reduce_none,
  1, 51, :_reduce_none,
  1, 42, :_reduce_22,
  1, 42, :_reduce_23,
  1, 42, :_reduce_24,
  1, 42, :_reduce_25,
  1, 42, :_reduce_26,
  2, 43, :_reduce_27,
  4, 43, :_reduce_28,
  0, 52, :_reduce_29,
  2, 52, :_reduce_30,
  3, 52, :_reduce_31,
  1, 53, :_reduce_32,
  3, 53, :_reduce_33,
  3, 44, :_reduce_34,
  3, 44, :_reduce_35,
  3, 44, :_reduce_36,
  3, 44, :_reduce_37,
  3, 44, :_reduce_38,
  3, 44, :_reduce_39,
  3, 44, :_reduce_40,
  3, 44, :_reduce_41,
  3, 44, :_reduce_42,
  3, 44, :_reduce_43,
  3, 44, :_reduce_44,
  3, 44, :_reduce_45,
  2, 44, :_reduce_46,
  3, 46, :_reduce_47,
  6, 47, :_reduce_48,
  0, 54, :_reduce_49,
  2, 54, :_reduce_50,
  3, 54, :_reduce_51,
  1, 55, :_reduce_52,
  3, 55, :_reduce_53,
  0, 56, :_reduce_54,
  2, 56, :_reduce_55,
  6, 48, :_reduce_56,
  1, 45, :_reduce_57,
  5, 49, :_reduce_58,
  8, 49, :_reduce_59,
  5, 50, :_reduce_60 ]

racc_reduce_n = 61

racc_shift_n = 107

racc_token_table = {
  false => 0,
  :error => 1,
  :IF => 2,
  :ELSE => 3,
  :WHILE => 4,
  :DEF => 5,
  :CLASS => 6,
  :NEWLINE => 7,
  :NUMBER => 8,
  :STRING => 9,
  :TRUE => 10,
  :FALSE => 11,
  :NIL => 12,
  :IDENTIFIER => 13,
  :CONSTANT => 14,
  :INSTANCE_VAR => 15,
  :CLASS_VAR => 16,
  :END => 17,
  "." => 18,
  "!" => 19,
  "*" => 20,
  "/" => 21,
  "+" => 22,
  "-" => 23,
  ">" => 24,
  ">=" => 25,
  "<" => 26,
  "<=" => 27,
  "==" => 28,
  "!=" => 29,
  "&&" => 30,
  "||" => 31,
  "=" => 32,
  "," => 33,
  ";" => 34,
  "(" => 35,
  ")" => 36 }

racc_nt_base = 37

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "IF",
  "ELSE",
  "WHILE",
  "DEF",
  "CLASS",
  "NEWLINE",
  "NUMBER",
  "STRING",
  "TRUE",
  "FALSE",
  "NIL",
  "IDENTIFIER",
  "CONSTANT",
  "INSTANCE_VAR",
  "CLASS_VAR",
  "END",
  "\".\"",
  "\"!\"",
  "\"*\"",
  "\"/\"",
  "\"+\"",
  "\"-\"",
  "\">\"",
  "\">=\"",
  "\"<\"",
  "\"<=\"",
  "\"==\"",
  "\"!=\"",
  "\"&&\"",
  "\"||\"",
  "\"=\"",
  "\",\"",
  "\";\"",
  "\"(\"",
  "\")\"",
  "$start",
  "Expressions",
  "Terminator",
  "ExpressionList",
  "Expression",
  "Literal",
  "Call",
  "Operator",
  "Constant",
  "Assign",
  "Def",
  "Class",
  "If",
  "While",
  "Variable",
  "Arguments",
  "ArgList",
  "Parameters",
  "ParamList",
  "SuperClass" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'grammar.y', 48)
  def _reduce_1(val, _values, result)
     result = Nodes.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 49)
  def _reduce_2(val, _values, result)
     result = Nodes.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 50)
  def _reduce_3(val, _values, result)
     result = Nodes.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 54)
  def _reduce_4(val, _values, result)
     result = [ val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 55)
  def _reduce_5(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 57)
  def _reduce_6(val, _values, result)
     result = val[0] 
    result
  end
.,.,

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

# reduce 17 omitted

module_eval(<<'.,.,', 'grammar.y', 77)
  def _reduce_18(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 19 omitted

# reduce 20 omitted

# reduce 21 omitted

module_eval(<<'.,.,', 'grammar.y', 87)
  def _reduce_22(val, _values, result)
     result = NumberNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 88)
  def _reduce_23(val, _values, result)
     result = StringNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 89)
  def _reduce_24(val, _values, result)
     result = TrueNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 90)
  def _reduce_25(val, _values, result)
     result = FalseNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 91)
  def _reduce_26(val, _values, result)
     result = NilNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 98)
  def _reduce_27(val, _values, result)
     result = CallNode.new(nil, val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 100)
  def _reduce_28(val, _values, result)
     result = CallNode.new(val[0], val[2], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 104)
  def _reduce_29(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 105)
  def _reduce_30(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 106)
  def _reduce_31(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 110)
  def _reduce_32(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 111)
  def _reduce_33(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 116)
  def _reduce_34(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 117)
  def _reduce_35(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 118)
  def _reduce_36(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 119)
  def _reduce_37(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 120)
  def _reduce_38(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 121)
  def _reduce_39(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 122)
  def _reduce_40(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 123)
  def _reduce_41(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 126)
  def _reduce_42(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 127)
  def _reduce_43(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 128)
  def _reduce_44(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 129)
  def _reduce_45(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 131)
  def _reduce_46(val, _values, result)
     result = CallNode.new(val[1], val[0], []) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 136)
  def _reduce_47(val, _values, result)
     result = AssignNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 143)
  def _reduce_48(val, _values, result)
     result = DefNode.new(val[1], val[2], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 147)
  def _reduce_49(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 148)
  def _reduce_50(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 149)
  def _reduce_51(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 153)
  def _reduce_52(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 154)
  def _reduce_53(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 160)
  def _reduce_54(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 161)
  def _reduce_55(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 164)
  def _reduce_56(val, _values, result)
     result = ClassNode.new(val[1], val[4], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 169)
  def _reduce_57(val, _values, result)
     result = ConstantNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 175)
  def _reduce_58(val, _values, result)
     result = IfNode.new(val[1], val[3], nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 180)
  def _reduce_59(val, _values, result)
     result = IfNode.new(val[1], val[3], val[6]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 186)
  def _reduce_60(val, _values, result)
     result = WhileNode.new(val[1], val[3]) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Parser
